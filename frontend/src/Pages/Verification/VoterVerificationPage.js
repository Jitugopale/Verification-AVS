import React, { useState } from "react";
import axios from "axios";
import { jsPDF } from "jspdf"; // Import jsPDF

const VoterVerificationPage = () => {
  const [idNumber, setIdNumber] = useState("");
  const [responseData, setResponseData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const handleVerify = async () => {
    if (!idNumber) {
      setError("ID Number is required");
      return;
    }

    setLoading(true);
    setError("");
    setResponseData(null);

    try {
      const res = await axios.post(
        "http://192.168.20.151:4000/api/voter/voter_verify",
        { id_number: idNumber }
      );
      if (res.data.status === "success") {
        setResponseData(res.data.verifiedData);
      } else {
        setError(res.data.message || "Verification failed. Please try again.");
      }
    } catch (err) {
      setError("An error occurred. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  // Generate PDF with the response data
  const generatePDF = () => {
    if (!responseData || !responseData.data) {
      alert("No data to generate PDF");
      return;
    }
  
    const data = responseData.data;
    const doc = new jsPDF();
    
    let yPosition = 10;
  
    // Add Branch Name Text (assuming it should be the first thing added)
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Branch Name: XYZ Branch", 10, yPosition);
    yPosition += 15;
  
    // Title Section
    doc.setFontSize(18);
    doc.setFont("helvetica", "bold");
    doc.text("Voter Verification Report", 15, yPosition);
    yPosition += 5;
  
    // Draw a horizontal line after the title for separation
    doc.setLineWidth(0.5);
    doc.line(10, yPosition, 200, yPosition);
    yPosition += 5;
  
    // General Information Section
    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.text("Voter Information", 10, yPosition);
    yPosition += 10;
  
    // Information rows with bold labels and normal text
    const info = [
      { label: "Voter ID:", value: data.input_voter_id },
      { label: "Name:", value: data.name },
      { label: "Gender:", value: data.gender },
      { label: "Age:", value: data.age || "N/A" },
      { label: "Relation Name:", value: data.relation_name || "N/A" },
      { label: "Relation Type:", value: data.relation_type || "N/A" },
      { label: "State:", value: data.state },
      { label: "District:", value: data.district },
      { label: "Polling Station:", value: data.polling_station },
      { label: "Constituency:", value: data.assembly_constituency },
      { label: "Constituency Number:", value: data.assembly_constituency_number },
      { label: "Part Number:", value: data.part_number },
      { label: "Part Name:", value: data.part_name },
      { label: "Parliamentary Name:", value: data.parliamentary_name },
      { label: "Parliamentary Number:", value: data.parliamentary_number },
    ];
  
    info.forEach(item => {
      doc.setFont("helvetica", "bold");
      doc.text(item.label, 10, yPosition);
      doc.setFont("helvetica", "normal");
      doc.text(item.value, 60, yPosition);
      yPosition += 10; // Adjust the spacing between each information row
    });
  
    // Address Section with bullet points
    doc.setFont("helvetica", "bold");
    doc.text("Address:", 10, yPosition);
    doc.setFont("helvetica", "normal");
    doc.text(data.area, 60, yPosition);
    yPosition += 15; // Adding some space after the address section
  
    // Draw a horizontal line before footer
    doc.setLineWidth(0.5);
    doc.line(10, yPosition, 200, yPosition);
    yPosition += 5;
  
    // Final Notes/Disclaimer (optional)
    doc.setFontSize(10);
    doc.setFont("helvetica", "italic");
    doc.text("This is an official report generated by AVS Verify Onboarding Solution", 10, yPosition);
    yPosition += 15; // Adding space after the notes
  
    // Save PDF
    doc.save("Voter_Verification_Report.pdf");
  };
  

  
  return (
    <div className="container-fluid mt-5">
      <div className="d-flex justify-content-center align-items-center">
        <div className="card shadow p-3" style={{ width: "400px" }}>
          <h1 className="card-title">Voter Verification</h1>
          <div className="mb-3">
            <label htmlFor="id_number" className="form-label">
              Enter Voter ID
            </label>
            <input
              type="text"
              className="form-control"
              id="id_number"
              value={idNumber}
              onChange={(e) => setIdNumber(e.target.value)}
            />
          </div>
          <button
            className="btn btn-primary"
            onClick={handleVerify}
            disabled={loading}
          >
            {loading ? "Verifying..." : "Verify"}
          </button>

          {/* Show error if any */}
          {error && <div className="alert alert-danger mt-3">{error}</div>}
        </div>
      </div>

      {/* Show response data below the card */}
      {responseData && (
     <div className="container mt-5 d-flex justify-content-center">
     <div className="card shadow-lg p-4" style={{ borderRadius: '10px', backgroundColor: '#f8f9fa', maxWidth: '800px' }}>
       <table className="table table-bordered" style={{ fontSize: '16px' }}>
         <thead>
           <tr>
             <th colSpan="2" className="text-center" style={{ fontSize: '28px', fontWeight: 'bold',color:'#686868' }}>
               VERIFICATION DETAILS
             </th>
           </tr>
         </thead>
         <tbody>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>Status :</td>
             <td style={{ textAlign: 'left', color: responseData.status ? 'green' : 'red' }}>
              {responseData.status ? "Verified" : "Not Verified"}
            </td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>Entered ID Number :</td>
             <td style={{ textAlign: 'left' }}>{idNumber}</td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>Name :</td>
             <td style={{ textAlign: 'left' }}>{responseData.data.name}</td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>Age :</td>
             <td style={{ textAlign: 'left' }}>{responseData.data.age || "N/A"}</td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>Gender :</td>
             <td style={{ textAlign: 'left' }}>{responseData.data.gender}</td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>Relation Name :</td>
             <td style={{ textAlign: 'left' }}>{responseData.data.relation_name || "N/A"}</td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>Relation Type :</td>
             <td style={{ textAlign: 'left' }}>{responseData.data.relation_type || "N/A"}</td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>State:</td>
             <td style={{ textAlign: 'left' }}>{responseData.data.state}</td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>District:</td>
             <td style={{ textAlign: 'left' }}>{responseData.data.district}</td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>Polling Station:</td>
             <td style={{ textAlign: 'left' }}>{responseData.data.polling_station}</td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>Assembly Constituency:</td>
             <td style={{ textAlign: 'left' }}>{responseData.data.assembly_constituency}</td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>Constituency Number:</td>
             <td style={{ textAlign: 'left' }}>{responseData.data.assembly_constituency_number}</td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>Part Number:</td>
             <td style={{ textAlign: 'left' }}>{responseData.data.part_number}</td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>Part Name:</td>
             <td style={{ textAlign: 'left' }}>{responseData.data.part_name}</td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>Parliamentary Name:</td>
             <td style={{ textAlign: 'left' }}>{responseData.data.parliamentary_name}</td>
           </tr>
           <tr>
             <td style={{ fontWeight: 'bold', textAlign: 'left' }}>Parliamentary Number:</td>
             <td style={{ textAlign: 'left' }}>{responseData.data.parliamentary_number}</td>
           </tr>
         </tbody>
       </table>
   
       <div className="text-center mt-4">
         <button
           className="btn btn-success btn-lg"
           style={{
             fontSize: '16px',
             padding: '12px 20px',
             borderRadius: '5px',
             boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
           }}
           onClick={generatePDF}
         >
           Download PDF
         </button>
       </div>
     </div>
   </div>
   
      )}
    </div>
  );
};

export default VoterVerificationPage;
