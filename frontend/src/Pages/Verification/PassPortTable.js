import React, { useState, useEffect } from "react";
import axios from "axios";
import { jsPDF } from "jspdf";

const PassPortTable = () => {
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [verificationResult, setVerificationResult] = useState(null);
  const [verifiedUsers, setVerifiedUsers] = useState([]);
  const [users, setUsers] = useState([]); // State to store users list

  // Fetch the verified users from the backend
  useEffect(() => {
    const fetchVerifiedUsers = async () => {
      try {
        const response = await axios.get(
          "http://localhost:5000/api/passport/verified"
        );
        setVerifiedUsers(response.data); // Set the fetched data into the state
      } catch (error) {
        console.error("Error fetching verified users:", error);
      }
    };
    fetchVerifiedUsers();
  },[]);


  

//   const handleDelete = async (aadharNumber) => {
//     // Show confirmation dialog
//     const isConfirmed = window.confirm("Are you sure you want to delete this user?");
  
//     // If user clicks "Yes"
//     if (isConfirmed) {
//       try {
//         const response = await axios.delete(`http://localhost:5000/api/voter/delete/${aadharNumber}`);
        
//         if (response.data.message === "User deleted successfully.") {
//           // If deletion is successful, update state by filtering out the deleted user
//           setUsers((prevUsers) => prevUsers.filter((user) => user.aadharNumber !== aadharNumber));
//           alert("User deleted successfully.");
//         } else {
//           alert("Failed to delete user.");
//         }
//       } catch (error) {
//         console.error("Error deleting user:", error);
//         alert("Failed to delete user. Please try again.");
//       }
//     } else {
//       // If user clicks "No", just return without deleting
//       alert("User deletion canceled.");
//     }
//   };
  

  // Function to generate and download the PDF
//   const handleDownloadPdf = (user) => {
//     const doc = new jsPDF();

//     // Add title
//     doc.setFont("helvetica", "bold");
//     doc.setFontSize(16);
//     doc.text("Aadhaar Verification Details", 14, 20);

//     doc.setLineWidth(0.5);
//     doc.line(10, 22, 200, 22);

//     // Add Aadhaar details
//     doc.setFont("helvetica", "normal");
//     doc.setFontSize(12);
//     doc.text(`Aadhaar Number: ${user.aadharNumber}`, 14, 75);
//     doc.text(`Name: ${user.verifiedData?.data?.full_name}`, 14, 85);
//     doc.text(`Gender: ${user.verifiedData?.data?.gender}`, 14, 95);
//     doc.text(`DOB: ${user.verifiedData?.data?.dob}`, 14, 105);

//     doc.text("Address:", 14, 115);
//     const addressLines = [
//       user?.verifiedData?.data?.address?.house,
//       user?.verifiedData?.data?.address?.street,
//       user?.verifiedData?.data?.address?.landmark,
//       user?.verifiedData?.data?.address?.loc,
//       user?.verifiedData?.data?.address?.po,
//       user?.verifiedData?.data?.address?.subdist,
//       user?.verifiedData?.data?.address?.dist,
//       user?.verifiedData?.data?.address?.state,
//       user?.verifiedData?.data?.address?.country,
//       user?.verifiedData?.data?.address?.zip,
//     ]
//       .filter(Boolean)
//       .join(", ");
//     const addressSplit = doc.splitTextToSize(addressLines, 180);
//     doc.text(addressSplit, 14, 120);

//     // Add the profile image
//     const imageData = `data:image/jpeg;base64,${user.verifiedData.data.profile_image}`;

//     // Add the image to the PDF (positioned at x=14, y=30 with width=50 and height=50)
//     doc.addImage(imageData, "JPEG", 14, 30, 35, 35);

//     // Footer text
//     doc.setFont("helvetica", "italic");
//     doc.setFontSize(10);
//     doc.text("Generated by Aadhaar Verification System", 14, 290);

//     // Save the PDF
//     doc.save(`${user.verifiedData?.data?.full_name}_aadhaar_verification.pdf`);
//   };

const handleDownloadPdf = (user) => {
    if (!user.verifiedData || !user.verifiedData.data) {
      alert('No data to generate PDF');
      return;
    }

    const data = user.verifiedData.data;
    const doc = new jsPDF();

    let yPosition = 10;
    const labelXPosition = 10;
    const valueXPosition = 50;

    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Passport Verification Details', 15, yPosition);
    yPosition += 15;

    // Passport Verification Information
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');

    doc.text('Passport Verification Information:', labelXPosition, yPosition);
    yPosition += 10;


    doc.setFont('helvetica', 'bold');
    doc.text(`Status:`, labelXPosition, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(`${user.verifiedData.message}`, valueXPosition, yPosition);
    yPosition += 10;
    
    doc.setFont('helvetica', 'bold');
    doc.text(`Reference ID:`, labelXPosition, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(`${user.verifiedData.reference_id}`, valueXPosition, yPosition);
    yPosition += 10;

    doc.setFont('helvetica', 'bold');
    doc.text(`File Number:`, labelXPosition, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(`${user.verifiedData.data.file_number}`, valueXPosition, yPosition);
    yPosition += 10;

    // Full Name
    doc.setFont('helvetica', 'bold');
    doc.text(`Full Name:`, labelXPosition, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(`${user.verifiedData.data.full_name}`, valueXPosition, yPosition);
    yPosition += 10;

    // Date of Birth
    doc.setFont('helvetica', 'bold');
    doc.text(`Date of Birth:`, labelXPosition, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(`${user.verifiedData.data.dob}`, valueXPosition, yPosition);
    yPosition += 10;

    // Date of Application
    doc.setFont('helvetica', 'bold');
    doc.text(`Date of Application:`, labelXPosition, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(`${user.verifiedData.data.date_of_application}`, 55, yPosition);
    yPosition += 10;

    // Application Type
    doc.setFont('helvetica', 'bold');
    doc.text(`Application Type:`, labelXPosition, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(`${user.verifiedData.data.application_type}`, valueXPosition, yPosition);
    yPosition += 10;

    // Save PDF
    doc.save('Passport_Verification_Details.pdf');
  };

  
  

  return (
    <>
      <h3 style={{
                  marginTop:'120px'
                }}>Verified Users</h3>
     <div className="row mb-5">
  <div className="col-12 col-md-1 mt-2" style={{width:'100px'}}>
    <p>From Date</p>
  </div>
  <div className="col-12 col-md-2">
    <input
      type="date"
      value={startDate}
      onChange={(e) => setStartDate(e.target.value)}
      placeholder="Start Date"
    />
  </div>

  <div className="col-12 col-md-1 mt-2 mt-md-0 offset-md-1" style={{marginTop:'12px'}}>
    <p>To Date</p>
  </div>
  <div className="col-12 col-md-2">
    <input
      type="date"
      value={endDate}
      onChange={(e) => setEndDate(e.target.value)}
      placeholder="End Date"
    />
  </div>

  <div className="col-12 col-md-2 mt-1 mt-md-0">
    <button>Excel Download</button>
  </div>
</div>


      <div
        style={{
          maxHeight: "400px", // Set the desired maximum height for the table container
          overflowY: "auto", // Enable vertical scrolling
          border: "1px solid #ddd", // Optional: Add a border to the container
        }}
      >
        <table style={{width:"100%"}}>
          <thead>
            <tr>
              <th
                style={{
                  padding: "8px",
                  border: "1px solid #ddd",
                  textAlign: "left",
                  backgroundColor:'hsl(0, 22.60%, 93.90%)'
                }}
              >
                Sr No
              </th>
              <th
                style={{
                  padding: "8px",
                  border: "1px solid #ddd",
                  textAlign: "left",
                  backgroundColor:'hsl(0, 22.60%, 93.90%)'
                }}
              >
                PassPort ID
              </th>
              <th
                style={{
                  padding: "8px",
                  border: "1px solid #ddd",
                  textAlign: "left",
                  backgroundColor:'hsl(0, 22.60%, 93.90%)'
                }}
              >
                Name
              </th>
              <th
                style={{
                  padding: "8px",
                  border: "1px solid #ddd",
                  textAlign: "left",
                  backgroundColor:'hsl(0, 22.60%, 93.90%)'
                }}
              >
                DOB
              </th>
              <th
                style={{
                  padding: "8px",
                  border: "1px solid #ddd",
                  textAlign: "left",
                  backgroundColor:'hsl(0, 22.60%, 93.90%)'
                }}
              >
                Date of Application
              </th>
              <th
                style={{
                  padding: "8px",
                  border: "1px solid #ddd",
                  textAlign: "left",
                  backgroundColor:'hsl(0, 22.60%, 93.90%)'
                }}
              >
                Verification Date
              </th>
              <th
                style={{
                  padding: "8px",
                  border: "1px solid #ddd",
                  textAlign: "left",
                  backgroundColor:'hsl(0, 22.60%, 93.90%)'
                }}
              >
                Download
              </th>
            </tr>
          </thead>
          <tbody>
            {verifiedUsers
              .filter((user) => {
                const userVerificationDate = new Date(user.verificationDate);
                let isInDateRange = true;

                // Ensure endDate includes the full last minute of the selected date
                let endDateObj = new Date(endDate);
                if (endDate) {
                  endDateObj.setHours(23, 59, 59, 999); // Set to the last millisecond of the day
                }

                // If startDate equals endDate and is provided, filter for that specific date
                if (startDate === endDate && startDate !== "") {
                  if (
                    userVerificationDate.toDateString() !==
                    new Date(startDate).toDateString()
                  ) {
                    isInDateRange = false;
                  }
                } else {
                  // Check if the user verification date is within the date range
                  isInDateRange =
                    (startDate === "" ||
                      userVerificationDate >= new Date(startDate)) &&
                    (endDate === "" || userVerificationDate <= endDateObj); // Use the modified endDateObj here
                }

                return isInDateRange;
              })
              .map((user, index) => (
                <tr key={index} style={{ border: "1px solid #ddd" }}>
                                   <td style={{ padding: "8px", border: "1px solid #ddd" }}>
          {index + 1}
        </td>

                  <td style={{ padding: "8px", border: "1px solid #ddd" }}>{user.verifiedData.data.file_number}</td>
                  <td style={{ padding: "8px", border: "1px solid #ddd" }}>{user.verifiedData.data.full_name || "Name not available"}</td>
                  <td style={{ padding: "8px", border: "1px solid #ddd" }}>{user.verifiedData.data.dob || "DOB not available"}</td>
                  <td style={{ padding: "8px", border: "1px solid #ddd" }}>{user.verifiedData.data.date_of_application || "DOB not available"}</td>
                  <td style={{ padding: "8px", border: "1px solid #ddd" }}>{user.formattedDate || "DOB not available"}</td>

                  <td style={{ padding: "8px", border: "1px solid #ddd" }}>
                    <button
                      onClick={() => handleDownloadPdf(user)}
                      title="Download PDF"
                      style={{
                        backgroundColor: "#4CAF50",
                        color: "white",
                        border: "none",
                        padding: "5px 10px",
                        borderRadius: "5px",
                        cursor: "pointer",
                      }}
                    >
                      <box-icon name='download'></box-icon>
                    </button>
                  </td>
                  {/* <td style={{ padding: "8px", border: "1px solid #ddd" }}>
                    <button
                    onClick={() => handleDelete(user.aadharNumber)}
                    title="Delete"
                    style={{
                        backgroundColor: "#f44336",
                        color: "white",
                        border: "none",
                        padding: "5px 10px",
                        borderRadius: "5px",
                        cursor: "pointer",
                    }}
                    >
                      <box-icon name="trash" type="solid"></box-icon>

                    </button>
                </td> */}
                </tr>
              ))}
          </tbody>
        </table>
      </div>
      {/* <button
        onClick={() => {
          localStorage.clear(); // Clears all data from localStorage
          alert("All local storage data has been cleared!");
        }}
        style={{
          padding: "10px 20px",
          backgroundColor: "#FF6347", // Color for the button
          color: "white",
          border: "none",
          borderRadius: "5px",
          cursor: "pointer",
        }}
      >
        Clear All Data
      </button> */}
    </>
  );
};

export default PassPortTable;
